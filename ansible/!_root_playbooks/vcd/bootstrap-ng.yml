- name: Bootstrap infrastructure from localhost to ESXi Vcenter Appliance 
  hosts: localhost
  #strategy: free
  gather_facts: False
  tasks:

    - name: Load groupvars/product global shared settings
      include_vars: group_vars/products/{{ ansible_product }}/{{ item }}.yml
      with_items:
        - vsphere
        - main

    - name: Load groupvars/product global shared settings
      include_vars: group_vars/products/{{ ansible_product }}/{{ ansible_environment }}/{{ item }}.yml
      with_items:
        - attached
        - main

    # - name: Debug values
    #   debug:
    #     msg: "{% if item.value.initial_only_dns_servers is defined %}{{ item.value.initial_only_dns_servers }}{% else %}{{ dns_servers }}{% endif %}"
    #   with_dict: "{{ vsphere_bootstrap.servers }}"

    - name: MULTI NET | Clone a VM from Template and customize, when more then one network
      vmware_guest:
        hostname: "{{ vsphere_fqdn }}"
        username: "{{ vsphere_login }}"
        password: "{{ vsphere_pass }}"
        validate_certs: no
        datacenter: "{{ vsphere_dc }}"
        folder: "/"
        name: "{{ item.value.name }}"
        template: "{{ vsphere_template_name }}"
        # disk: 
        #   - datastore: "vortex-iscsi-15.45Tb"
        #     size_gb: 812
        #     type: "thin"

        networks:
        - name: "{{ item.value.network }}"
          ip: "{{ item.value.ip }}"
          netmask: 255.255.255.0
          gateway: "{{ item.value.gw }}"
          mac: "{{ lookup('random_mac') }}"
          domain: "{{ vsphere_domain }}"
          dns_servers: "{% if item.value.initial_only_dns_servers is defined %}{{ item.value.initial_only_dns_servers }}{% else %}{{ dns_servers }}{% endif %}"
          start_connected: True
          type: static
        - name: "{{ item.value.second_network }}"
          ip: "{{ item.value.second_ip }}"
          netmask: 255.255.255.0
          mac: "{{ lookup('random_mac') }}"
          start_connected: True
          type: static
        customization:
          hostname: "{{ item.value.name }}"
          dns_servers: "{% if item.value.initial_only_dns_servers is defined %}{{ item.value.initial_only_dns_servers }}{% else %}{{ dns_servers }}{% endif %}"
          domain: "{{ vsphere_domain }}"
        hardware:
          memory_mb: "{{ item.value.memory_size_mb | default('1024') }}"
          num_cpus: "{{ item.value.cpu_count | default('2') }}"
        resource_pool: "{{ item.value.resource_pool | default('non_prod') }}"
        state: poweredon
      when: item.value.second_ip is defined and item.value.second_ip != '' and item.value.second_ip != 'null'
      with_dict: "{{ vsphere_bootstrap.servers }}"

    - name: ONE NET | Clone a VM from Template and customize, when one network
      vmware_guest:
        hostname: "{{ vsphere_fqdn }}"
        username: "{{ vsphere_login }}"
        password: "{{ vsphere_pass }}"
        validate_certs: no
        datacenter: "{{ vsphere_dc }}"
        folder: "/"
        name: "{{ item.value.name }}"
        template: "{{ vsphere_template_name }}"
        # disk: 
        #   - datastore: "vortex-iscsi-15.45Tb"
        #     size_gb: 812
        #     type: "thin"
        networks:
        - name: "{{ item.value.network }}"
          ip: "{{ item.value.ip }}"
          netmask: 255.255.255.0
          gateway: "{{ item.value.gw }}"
          mac: "{{ lookup('random_mac') }}"
          domain: "{{ vsphere_domain }}"
          dns_servers: "{% if item.value.initial_only_dns_servers is defined %}{{ item.value.initial_only_dns_servers }}{% else %}{{ dns_servers }}{% endif %}"
          start_connected: True
          type: static
        customization:
          hostname: "{{ item.value.name }}"
          dns_servers: "{% if item.value.initial_only_dns_servers is defined %}{{ item.value.initial_only_dns_servers }}{% else %}{{ dns_servers }}{% endif %}"
          domain: "{{ vsphere_domain }}"
        hardware:
          memory_mb: "{{ item.value.memory_size_mb | default('1024') }}"
          num_cpus: "{{ item.value.cpu_count  | default('2') }}"
        resource_pool: "{{ item.value.resource_pool | default('non_prod') }}"
        state: poweredon
      when: (item.value.second_ip is defined and item.value.second_ip == '') or (item.value.second_ip is not defined) or (item.value.second_ip == 'null')
      with_dict: "{{ vsphere_bootstrap.servers }}"

    - name: Wait for system Initial bastion hosts to become and reachable
      wait_for_connection:
        timeout: 1200
      when: item.value.initial_bastion_host is defined
      with_dict: "{{ vsphere_bootstrap.servers }}"