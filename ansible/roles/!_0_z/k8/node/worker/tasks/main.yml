
- name: Create the directories for configuration each worker
  file:
    path: "{{ item.value }}"
    state: directory
    mode: 0750
  with_dict: "{{ k8s_service_settings.directories | default({}) }}"
  tags: [configuration,join]
  when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']

- name: Get join token for workers nodes
  command: "kubeadm token generate"
  register: get_join_token_for_workers_nodes
  delegate_to: "{{ item }}"
  when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
  with_items: "{{ groups['kubernetes-master'][0] }}"

- name: Show join token on worker
  debug:
    msg: "{{ item.stdout }}"
  when: inventory_hostname in groups['kubernetes-worker']
  with_items: "{{ get_join_token_for_workers_nodes.results }}"

- name: Show trimmed token on worker
  set_fact:
    trimmed_token_string: "{{ item.stdout }}"
  when: inventory_hostname in groups['kubernetes-worker']
  with_items: "{{ get_join_token_for_workers_nodes.results }}"

- name: Show trimmed_token_string string on worker
  debug:
    msg: "{{ trimmed_token_string }}"
  when: inventory_hostname in groups['kubernetes-worker']

#

- name: Get join string kubeadm token create
  command: kubeadm token create {{ trimmed_token_string }} --print-join-command --ttl=0 --kubeconfig /etc/kubernetes/admin.conf
  register: get_string_kubeadm_for_workers_nodes
  delegate_to: "{{ item }}"
  when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
  with_items: "{{ groups['kubernetes-master'][0] }}"

- name: Show join string on worker
  debug:
    msg: "{{ item.stdout }}"
  when: inventory_hostname in groups['kubernetes-worker']
  with_items: "{{ get_string_kubeadm_for_workers_nodes.results }}"

- name: Show trimmed string on worker
  set_fact:
    trimmed_join_string: "{{ item.stdout }}"
  when: inventory_hostname in groups['kubernetes-worker']
  with_items: "{{ get_string_kubeadm_for_workers_nodes.results }}"

- name: Show trimmed_token_string string on worker
  debug:
    msg: "{{ trimmed_join_string }}"
  when: inventory_hostname in groups['kubernetes-worker']

#

- name: Join workers nodes for current cluster
  command: "{{ trimmed_join_string }} --ignore-preflight-errors=all"
  when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']

#

# - name: Show new token on master
#   debug:
#     msg: "{{ new_kube_auth_token.stdout | join | trim | replace('\n', '') }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Local set_fact new token 
#   set_fact:
#     trimmed_join_string: "{{ new_kube_auth_token.stdout | join | trim | replace('\n', '') }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Show trimmed_join_string token on master
#   debug:
#     msg: "{{ trimmed_join_string }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Show and register trimmed_join_string token on worker
#   debug:
#     msg: "{{ trimmed_join_string }}"
#   register: remote_debug_save_join_string
#   delegate_to: "{{ item }}"
#   with_items: "{{ groups['kubernetes-worker'] }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Show remote_debug_save_join_string token on workers
#   debug:
#     msg: "{{ remote_debug_save_join_string }}"
#   when: inventory_hostname in groups['kubernetes-worker']

# - name: Delegate set_fact new token 
#   set_fact:
#     trimmed_join_string: "{{ new_kube_auth_token.stdout | join | trim | replace('\n', '') }}"
#   delegate_to: "{{ item }}"
#   with_items: "{{ groups['kubernetes-worker'] }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Show trimmed_join_string token on workers
#   debug:
#     msg: "{{ trimmed_join_string }}"
#   when: inventory_hostname in groups['kubernetes-worker']

# - name: Create a new token new_kube_auth_token on master
#   raw: kubeadm token generate
#   register: new_kube_auth_token
#   delegate_to: "{{ item }}"
#   delegate_facts: True
#   with_items: "{{ groups['kubernetes-master'][0] }}"
#   when: inventory_hostname in groups['kubernetes-worker']



# - name: Set as fact a new token on first with delegate to workers
#   set_fact: 
#     kubeadm_token_generate: "{{ new_kube_auth_token.stdout | join }}"
#   delegate_to: "{{ item }}"
#   when: inventory_hostname in groups['kubernetes-worker']
#   with_items: "{{ groups['kubernetes-worker'] }}"


# - name: Set as fact a new token on first with delegate to workers
#   set_fact: 
#     kubeadm_token_generate: "{{ new_kube_auth_token.stdout | join }}"
#   delegate_to: "{{ item }}"
#   when: inventory_hostname in groups['kubernetes-master'][0]
#   with_items: "{{ groups['kubernetes-worker'] }}"

# # - name: Create a new token
# #   shell: kubeadm token generate
# #   register: new_kube_auth_token
# #   delegate_to: "{{ groups['kubernetes-master'][0] }}"
# #   # delegate_facts: True
# #   #with_items: "{{ groups['kubernetes-master'] }}"
# #   when: inventory_hostname in groups['kubernetes-worker']

# - name: Show new token on clients
#   debug:
#     msg: "{{ kubeadm_token_generate }}"
#   when: inventory_hostname not in groups['kubernetes-master']


# - name: Set as fact a new token
#   set_fact: 
#     kubeadm_token_generate: "{{ new_kube_auth_token.results }}"
#   # register: new_kube_auth_token
#   delegate_to: "{{ item }}"
#   with_items: "{{ groups['kubernetes-master'][0] }}"
#   when: inventory_hostname not in groups['kubernetes-master']


# - name: Show new token 
#   debug:
#     msg: "{{ item }}"
#   with_items: |
#     "{% for key,value in kubeadm_token_generate %}{% if 'stdout' in key %}{{ value | join }}{% endif %}{% endfor %}"
#   when: inventory_hostname not in groups['kubernetes-master']
#   # with_dict: "{{ kubeadm_token_generate }}"

# # - name: Show new token 
# #   debug:
# #     msg: "{{ new_kube_auth_token['results'] | join }}"
# #   delegate_to: "{{ item }}"
# #   when: inventory_hostname not in groups['kubernetes-master']
# #   with_items: "{{ groups['kubernetes-master'][0] }}"

# - name: Create a new join string
#   shell: kubeadm token create {{ new_kube_auth_token.stdout | join }} --print-join-command --ttl=0
#   register: join_kube_auth_token
#   delegate_to: "{{ item }}"
#   when: inventory_hostname not in groups['kubernetes-master']
#   with_items: "{{ groups['kubernetes-master'][0] }}"

# - name: Show new join string 
#   debug:
#     msg: "{{ join_kube_auth_token.stdout | join }}"
#   delegate_to: "{{ item }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
#   with_items: "{{ groups['kubernetes-master'][0] }}"

# - name: Get join token for workers nodes
#   shell: "kubeadm --kubeconfig /etc/kubernetes/admin.conf token list | tail -n -1 | awk '{print $1}'"
#   register: k8s_workers_join_token
#   delegate_to: "{{ item }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
#   with_items: "{{ groups['kubernetes-master'][0] }}"

# # GET TOKEN
# # kubeadm token create --print-join-command --kubeconfig /etc/kubernetes/admin.conf -v=5

# - name: Get ca.crt hash for join workers nodes
#   shell: "openssl x509 -in /opt/ca/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1"
#   register: k8s_workers_ca_hash
#   delegate_to: "{{ item }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
#   with_items: "{{ groups['kubernetes-master'][0] }}"

# - name: Set result k8s_workers_ca_hash
#   set_fact:
#     k8s_workers_ca_hash_result: "{{ item.stdout }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
#   with_items: "{{ k8s_workers_ca_hash.results }}"

# - name: Set result k8s_workers_join_token
#   set_fact:
#     k8s_workers_join_token_result: "{{ item.stdout }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']
#   with_items: "{{ k8s_workers_join_token.results }}"

# - name: Show join workers token and certificate hash on workers
#   debug:
#     msg: "{{ item }}"
#   with_items:
#     - "{{ k8s_workers_ca_hash_result }}"
#     - "{{ k8s_workers_join_token_result }}"
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster'] and debug_playbook is defined

# - name: Template 10-kubeadm.conf run daemon extension config
#   template:
#     src: 10-kubeadm.conf
#     dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
#     mode: 0755
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-worker']

# - name: Template kubeadm conf to drop-in directory
#   template: 
#     src: 20-extra-args.conf.j2 
#     dest: /etc/systemd/system/kubelet.service.d/20-extra-args.conf
#     mode: 0755
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-worker']

# - name: System Reread Configs for systemd
#   systemd:
#     daemon_reload: yes

# - name: Reload kubelet service
#   systemd:
#     state: restarted
#     name: kubelet

# - name: Join workers nodes for current cluster
#   command: kubeadm join {{ LOAD_BALANCER_DNS }}:{{ K8S_CLUSTER_LISTEN_PORT }} --token {{ k8s_workers_join_token_result }} --discovery-token-ca-cert-hash sha256:{{ k8s_workers_ca_hash_result }} --ignore-preflight-errors=all
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-cluster']

# - name: Copy admin.conf from first master after cluster init phase 4 workers
#   synchronize:
#     src: "/etc/kubernetes/admin.conf"
#     dest: "/etc/kubernetes/"
#   delegate_to: "{{ groups['kubernetes-master'][0] }}"
#   tags: config_copy
#   with_items: |
#     {% set hostslist = [] %}
#     {% for host in groups['kubernetes-cluster'] %}
#     {% if host not in groups['kubernetes-master'] %}
#     {% set hostslist2 = hostslist.append(hostvars[host]['ansible_nodename']) %}
#     {% endif %}
#     {% endfor %}
#     {{ hostslist }}
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-worker']

# - name: Copy ca.crt certificates from first master after cluster init phase 4 workers
#   synchronize:
#     src: "/etc/kubernetes/admin.conf"
#     dest: "/etc/kubernetes/"
#   delegate_to: "{{ groups['kubernetes-master'][0] }}"
#   tags: config_copy
#   with_items: |
#     {% set hostslist = [] %}
#     {% for host in groups['kubernetes-cluster'] %}
#     {% if host not in groups['kubernetes-master'] %}
#     {% set hostslist2 = hostslist.append(hostvars[host]['ansible_nodename']) %}
#     {% endif %}
#     {% endfor %}
#     {{ hostslist }}
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-worker']

# - name: Copy result config to root home dir for able to manage the cluster
#   command: "{{ item }}"
#   with_items:
#     - mkdir -p /root/.kube
#     - cp -i /etc/kubernetes/admin.conf /root/.kube/config
#   when: inventory_hostname not in groups['kubernetes-master'] and inventory_hostname in groups['kubernetes-worker']
