- name: Create the directories for configuration
  file:
    path: "{{ item.value }}"
    state: directory
    mode: 0750
  with_dict: "{{ ca_service_settings.directories | default({}) }}"
  tags: [configuration,ca]
  when: inventory_hostname in groups['kubernetes-master']

# - name: Template configs to CA master
#   template:
#     src: "{{ item }}"
#     dest: "{{ ca_service_settings.directories.config }}/{{ item }}"
#   with_items:
#     - config.json
#     - ca-config.json
#     - ca-csr.json
#     - etcd-csr.json
#     - kube-api-csr.json
#     - admin-csr.json
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Template configs to CA master
#   template:
#     src: "{{ item }}"
#     dest: "{{ ca_service_settings.directories.config }}/{{ item }}"
#     mode: 0755
#   with_items:
#     - make_apiserver_certs.sh
#   when: inventory_hostname in groups['kubernetes-master']
#   tags: ca_vortex

# - name: Template node csr to master
#   template:
#     src: "node-csr.json"
#     dest: "{{ ca_service_settings.directories.config }}/node-csr-{{ item }}.json"
#     mode: 0755
#   with_items: "{{ groups['kubernetes-cluster'] }}"
#   when: inventory_hostname in groups['kubernetes-master']
#   tags: ca_vortex



# - name: Create CA CSR
#   shell: cfssl gencert -initca {{ ca_service_settings.directories.config }}/ca-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/ca
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Generate certificates
#   shell: "{{ ca_service_settings.directories.config }}/make_apiserver_certs.sh {% for host in groups['kubernetes-master'] %}{{ hostvars[host]['second_ip'] }} {% endfor %}"
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Run to generate ETCD certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},{{ CALICO_ETCD_CLUSTER_IP }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/etcd-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/etcd
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Run to generate Api Kube certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{{ item }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/kube-api-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/kube-api-csr-{{ item }}
#   # shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},{{ CALICO_ETCD_CLUSTER_IP }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/kube-api-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/kube-api-csr-{{ item }}
#   when: inventory_hostname in groups['kubernetes-master'][0]
#   with_items: "{{ groups['kubernetes-master'] }}"

# - name: Run to generate Workers Kube certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-worker'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},{{ CALICO_ETCD_CLUSTER_IP }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/kube-api-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/worker-{{ item }}
#   # shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/kube-api-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/kube-api-csr-{{ item }}
#   when: inventory_hostname in groups['kubernetes-master'][0]
#   with_items: "{{ groups['kubernetes-worker'] }}"

# - name: Run to generate Node all Kube certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-worker'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},{{ CALICO_ETCD_CLUSTER_IP }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/node-csr-{{ item }}.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/node-{{ item }}
#   # shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default,ca.{{ public_consul_domain }}' -profile=kubernetes {{ ca_service_settings.directories.config }}/kube-api-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/kube-api-csr-{{ item }}
#   when: inventory_hostname in groups['kubernetes-master'][0]
#   with_items: "{{ groups['kubernetes-cluster'] }}"

# - name: Run to generate All Kubernetes services certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},{{ CALICO_ETCD_CLUSTER_IP }},kubernetes.{{ public_consul_domain }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default' -profile={{ item }} {{ ca_service_settings.directories.config }}/config.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/{{ item }}
#   with_items:
#     - kubernetes
#     - server
#     - peer
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Run generate admin certificate
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -profile=kubernetes {{ ca_service_settings.directories.config }}/admin-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/admin
#   when: inventory_hostname in groups['kubernetes-master'][0]

# # # - name: Run to generate CA certificates
# # #   shell: cfssl gencert -initca {{ ca_service_settings.directories.config }}/ca-csr.json | cfssljson -bare {{ ca_service_settings.directories.pki }}/ca
# # #   when: inventory_hostname in groups['kubernetes-master'][0]

# cfssl gencert -initca ca-csr.json | cfssljson -bare ca
# # cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd


# - name: Run to generate All Kubernetes services certificates
#   shell: cfssl gencert -ca={{ ca_service_settings.directories.pki }}/ca.pem -ca-key={{ ca_service_settings.directories.pki }}/ca-key.pem -config={{ ca_service_settings.directories.config }}/ca-config.json -hostname='{% for host in groups['kubernetes-master'] %}{{ hostvars[host]['ansible_nodename'] }},{{ hostvars[host]['second_ip'] }},{{ hostvars[host].ansible_default_ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %},{{ K8S_CLUSTER_ADDRESS }},kubernetes.{{ public_consul_domain }},vortex.{{ public_consul_domain }},127.0.0.1,kubernetes.default' -profile={{ item }} {{ ca_service_settings.directories.config }}/ca-csr.json | cfssljson -bare {{ ca_service_settings.directories.data }}/{{ item }}
#   with_items:
#     - kubernetes
#     - server
#     - peer
#   when: inventory_hostname in groups['kubernetes-master'][0]

# - name: Shell remove
#   shell: rm -rf {{ ca_service_settings.directories.data }}/cfssl*


- name: Shell copy pem to crt
  shell: "cp {{ ca_service_settings.directories.pki }}/{{ item }}.pem {{ ca_service_settings.directories.pki }}/{{ item }}.crt"
  with_items:
    - etcd
    - ca
    - kubernetes
    - server
    - peer
    - admin
  when: inventory_hostname in groups['kubernetes-master'][0]

- name: Shell copy keys pem to key
  shell: "cp {{ ca_service_settings.directories.pki }}/{{ item }}-key.pem {{ ca_service_settings.directories.pki }}/{{ item }}.key"
  with_items:
    - etcd
    - ca
    - kubernetes
    - server
    - peer
    - admin
  when: inventory_hostname in groups['kubernetes-master'][0]

